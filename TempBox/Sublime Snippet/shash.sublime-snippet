<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;
#ifdef Sabbir
#include <E:\CodeBox\TempBox\Debug\debug.h>
#include <E:\CodeBox\TempBox\Basic\db.h>
#else
#define dbg(x...)
#endif
#define ll                 long long
#define all(x)             (x).begin(), (x).end()
#define rev(x)             reverse(all(x))
#define in(v)              for(auto &b:v)cin>>b;
#define pb                 push_back
#define vi                 vector<int> 
const int mx=4e5+5;
// #warning CHANGE INT-LONG-LONG IN CASE OF ORDERED SET
// #warning CHANGE MAX VALUE
// #warning change endl and FastIO for interactive
typedef long long LL;
typedef long double LD;
#define pi acos(-1)
#define int long long
#define pii pair<int,int>
const LL MAX = 100;
const LL MOD = (1e9) + 7;
const LL INF = (1e15) + 5;
typedef pair<LL, LL> PLL;

namespace Hashing {
    #define ff first
    #define ss second

    // Large prime numbers for modulo operations
    const PLL M = {1e9+7, 1e9+9}; 

    // Base for the hash functions, should be larger than alphabet size
    const LL base = 1259;

    // Highest length of string to be hashed
    const int N = 1e6+7; 

    // Operator overloading for PLL struct to simplify arithmetic operations
    PLL operator+ (const PLL& a, LL x)     {return {a.ff + x, a.ss + x};}
    PLL operator- (const PLL& a, LL x)     {return {a.ff - x, a.ss - x};}
    PLL operator* (const PLL& a, LL x)     {return {a.ff * x, a.ss * x};}
    PLL operator+ (const PLL& a, PLL x)    {return {a.ff + x.ff, a.ss + x.ss};}
    PLL operator- (const PLL& a, PLL x)    {return {a.ff - x.ff, a.ss - x.ss};}
    PLL operator* (const PLL& a, PLL x)    {return {a.ff * x.ff, a.ss * x.ss};}
    PLL operator% (const PLL& a, PLL m)    {return {a.ff % m.ff, a.ss % m.ss};}
    ostream& operator<<(ostream& os, PLL hash) {
        return os<<"("<<hash.ff<<", "<<hash.ss<<")";
    }

    // Array to store powers of the base mod M
    PLL pb[N];      

    // Precomputes the powers of the base modulo M
    void hashPre() {
        pb[0] = {1,1};
        for (int i=1; i<N; i++) pb[i] = (pb[i-1] * base)%M;
    }

    // Calculates the hashes of all prefixes of a string, including the empty prefix
    vector<PLL> hashList(string s) {
        int n = s.size();
        vector<PLL> ans(n+1);
        ans[0] = {0,0};
        for (int i=1; i<=n; i++) ans[i] = (ans[i-1] * base + s[i-1])%M;
        return ans;
    }

    // Calculates the hash of a substring s[l..r] (1-indexed)
    PLL substringHash(const vector<PLL> &hashlist, int l, int r) {
        return (hashlist[r]+(M-hashlist[l-1])*pb[r-l+1])%M;
    }

    // Calculates the hash of a whole string
    PLL Hash (string s) {
        PLL ans = {0,0};
        for (int i=0; i<s.size(); i++)  ans=(ans*base + s[i])%M;
        return ans;
    }

    // Appends a character to the current hash and updates it
    PLL append(PLL cur, char c) {
        return (cur*base + c)%M;
    }

    // Prepends a character to the current hash with size k
    PLL prepend(PLL cur, int k, char c) {
        return (pb[k]*c + cur)%M;
    }

    // Replaces the i-th (0-indexed) character from right in the hash from 'a' to 'b'
    PLL replace(PLL cur, int i, char a, char b) {
        return cur + pb[i] * (M+b-a)%M;
    }

    // Erases a character from the front of the string with size len
    PLL pop_front(PLL hash, int len, char c) {
        return (hash + pb[len-1]*(M-c))%M;
    }

    // Concatenates two hashes where the length of the right is k
    PLL concat(PLL left, PLL right, int k) {
        return (left*pb[k] + right)%M;
    }

    // Computes the power of a hash value using modular exponentiation
    PLL power (const PLL& a, LL p) {
        if (p==0)   return {1,1};
        PLL ans = power(a, p/2);
        ans = (ans * ans)%M;
        if (p%2)    ans = (ans*a)%M;
        return ans;
    }

    // Computes the modular inverse of a hash value
    PLL inverse(PLL a)  {
        if (M.ss == 1)  return power(a, M.ff-2);
        return power(a, (M.ff-1)*(M.ss-1)-1);
    }

    // Erases a character from the back of the string
    PLL invb = inverse({base, base});
    PLL pop_back(PLL hash, char c) {
        return ((hash-c+M)*invb)%M;
    }

    // Calculates the hash of a string with size len repeated cnt times
    PLL repeat(PLL hash, int len, LL cnt) {
        PLL mul = ((pb[len*cnt]-1+M) * inverse(pb[len]-1+M))%M;
        PLL ans = (hash*mul);
        if (pb[len].ff == 1)    ans.ff = hash.ff*cnt;
        if (pb[len].ss == 1)    ans.ss = hash.ss*cnt;
        return ans%M;
    }
}

int pagol()
{
    int n, k;
    cin >> n >> k;
    string inp, a, b, rev;
    cin >> inp;
    rev = inp;
    reverse(all(rev));

    // Build strings a and b with alternating 0s and 1s
    for(int i = 0, parity = 0 ; i < n ; i+=k, parity++) 
    {
        for(int j = i ; j < i+k ; j++)
        {
            a.push_back('0' + (parity%2 == 0));
            b.push_back('0' + (parity%2 == 1));
        }
    }

    // Calculate hashes for a and b
    pii hash1 = Hashing::Hash(a), hash2 = Hashing::Hash(b);
    vector <pii> hL = Hashing::hashList(inp), rL = Hashing::hashList(rev);

    // Check if any rotation of the string can match hash1 or hash2
    for(int i = 0 ; i < n ; i++)
    {
        int indx = i+1;
        pii opHash = Hashing::concat(Hashing::substringHash(hL, indx+1, n), Hashing::substringHash(rL, n-indx+1, n), indx);
        if(opHash == hash1 || opHash == hash2)
        {
            cout << indx << endl;
            return 0;
        }
    }
    cout << -1 << endl;
    return 0;
}

int32_t main() {
  ios::sync_with_stdio(0);cin.tie(0);
  #ifdef Sabbir
      freopen("Error.txt", "w", stderr);
  #endif
  Hashing::hashPre();
  int t = 1;
  cin>>t;
  while (t--) {
    pagol();
  }
  return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>shash</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
