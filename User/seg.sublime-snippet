<snippet>
	<content><![CDATA[
const int N = 4e6 + 9;

int sum;

struct ST {
    int t[4 * N];

    ST() { memset(t, 0, sizeof t); }

    void build(int n, int b, int e) {
        if (b == e) {
            t[n] = 1;
            return;
        }
        int mid = (b + e) >> 1, l = n << 1, r = l | 1;
        build(l, b, mid);
        build(r, mid + 1, e);
        t[n] = t[l] + t[r];
    }

    void upd(int n, int b, int e, int i, int x) {
        if (b > i || e < i) return;
        if (b == e && b == i) {
            t[n] = 0;
            return;
        }
        int mid = (b + e) >> 1, l = n << 1, r = l | 1;
        upd(l, b, mid, i, x);
        upd(r, mid + 1, e, i, x);
        t[n] = t[l] + t[r];
    }


    int query(int n, int l, int r) {
        if (l == r) {
            sum -= t[n];
            return (sum == 0) ? r : INT_MAX;
        }
        if (sum > t[n]) {
            sum -= t[n];
            return (sum == 0) ? r : INT_MAX;
        }
        int mid = (l + r) >> 1;

        int s1 = query(n << 1, l, mid);
        if (sum == 0)
            return s1;
        if (sum) {
            s1 = query((n << 1) | 1, mid + 1, r);
        }
        if (sum == 0)
            return s1;
        return (sum == 0) ? r : INT_MAX;
    }
};

ST st;
void solve() {
    int n;
    cin >> n;
    st.build(1, 1, n);
    vector<int> a(n / 2), b(n / 2), ans1, ans2;
    cin >> a;
    cin >> b;
    for (int i = 0; i < n / 2; i++) {
        sum = a[i];
        ans1.push_back(st.query(1, 1, n));
        st.upd(1, 1, n, ans1.back(), 0);
        sum = b[i];
        ans2.push_back(st.query(1, 1, n));
        st.upd(1, 1, n, ans2.back(), 0);
    }
    cout << ans1 << "\n";
    cout << ans2 << "\n";
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seg</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
